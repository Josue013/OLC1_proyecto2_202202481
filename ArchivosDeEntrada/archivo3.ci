let vectorEntero: int[] = new vector int [20];
vectorEntero[0] = 100;
vectorEntero[1 + 0] = 50;
vectorEntero[2] = 1;
vectorEntero[3] = 150;
vectorEntero[10 - 6] = 70;
vectorEntero[5] = 25;
vectorEntero[6] = 33;
vectorEntero[CAST(70 / 10 AS int)] = 0;
vectorEntero[8] = 81;
vectorEntero[9] = 11;
vectorEntero[100 - 90] = 5;
vectorEntero[11] = 9;
vectorEntero[12] = 7;
vectorEntero[13] = if (true) 77: -100; // debe ser 77
vectorEntero[14] = 57;
vectorEntero[15] = 44;
vectorEntero[16] = 23;
vectorEntero[17] = 10;
vectorEntero[18] = 167;
vectorEntero[19] = 2024;


let entradas: int[][] = [
    [0, 0, 1],
    [1, 1, 0],
    [1, 0, 1],
    [0, 1, 0]
];

EJECUTAR main();

let salidas: int[] = [0, 1, 1, 0]; // Etiquetas de salida
let inputSize: int = 3; // tamaño de las entradas
let numEpochs: int = 1000; // numero de iteraciones
let learningRate: double = 0.01; // tasa de aprendizaje
let waights: double[] = new vector double[inputSize]; // pesos


function int FuncionActivacion(sum: double){
    return if (sum >= 0) 1: 0;
}

function void llenarPesos(){
    for (let i: int = 0; i < inputSize; i++) {
        waights[i] = 0.0;
    }
}

// Función para entrenar el perceptrón
function void Entrenamiento() {
    llenarPesos();
    for (let epoch: int = 0; epoch < numEpochs; epoch++) {
        for (let i: int = 0; i < 4; i++) {
            //calcular salida ponderada
            let weightedSum: double = 0.0;
            for (let j: int = 0; j < inputSize; j++) {
                weightedSum = weightedSum + (entradas[i][j] * waights[j]);
            }

            //calcular error
            let predicted: int = FuncionActivacion(sum = weightedSum);
            let error: int = salidas[i] - predicted;

            // actualizar pesos
            for (let j: int = 0; j < inputSize; j++) {
                waights[j] = waights[j] + (learningRate * error * entradas[i][j]);
            }

        }
    }
}

// funcion de prediccion con el percetron entrenado
function int predecir(){
    let input: int[] = [1, 0, 0];
    let weightedSum: double = 0.0;
    for (let i: int = 0; i < inputSize; i++) {
        weightedSum = weightedSum + (input[i] * waights[i]);
    }
    return FuncionActivacion(sum = weightedSum);
}

function void EjecucionPerceptron(){
    Entrenamiento();
    let prediccion: int = predecir();
    echo "Prediccion para [1, 0, 0]: " + prediccion;
}

function void vectorDoble(){
    echo "--------------------------------------------------------";
    echo "----------------- VECTOR 2 DIMENSION -------------------";
    EjecucionPerceptron();
}

function void insertionSort() {
    let n: int = len(vectorEntero);
    for (let i: int = 1; i < n; i++) {
        let key: int = vectorEntero[i];
        let j: int = i - 1;
        while (j >= 0 && vectorEntero[j] > key) {
            vectorEntero[j + 1] = vectorEntero[j];
            j = j - 1;
        }
        vectorEntero[j + 1] = key;
    }
}

function void imprimirVector() {
    let cadena: string = "[";
    for (let i: int = 0; i < len(vectorEntero); i++) {
        cadena = cadena + vectorEntero[i] + " ";
    }
    cadena = cadena + "]\n";
    echo cadena;
}

function void vectorSimple(){
    echo "--------------------------------------------------------";
    echo "----------------- VECTOR 1 DIMENSION -------------------";
    echo "Vector original: ";
    imprimirVector();
    insertionSort();
    echo "Vector ordenado: ";
    imprimirVector();
}

function void Casteos(){
    echo "--------------------------------------------------------";
    echo "----------------------- CASTEOS ------------------------";
    let ent_to_dob: double = CAST(2024 AS double);
    let dob_to_ent: int = CAST((61 + (1 / 3)) AS int);
    let ent_to_str: string = CAST(2024 AS string);
    let ent_to_c: char = CAST(70 AS char); // F
    let dob_to_str: string = CAST(61.1 AS string);
    let c_to_ent: int = CAST('R' AS int); // 82
    let c_to_dob: double = CAST('J' AS double); // 74.0

    echo "int_to_double: " + ent_to_dob;
    echo "double_to_int: " + dob_to_ent;
    echo "int_to_string: " + ent_to_str;
    echo "int_to_char: " + ent_to_c;
    echo "double_to_string: " + dob_to_str;
    echo "char_to_int: " + c_to_ent;
    echo "char_to_double: " + c_to_dob;

    //validaciones
    /*echo int_to_double is double;
    echo double_to_int is int;
    echo int_to_string is string;
    echo int_to_char is char;
    echo double_to_string is string;
    echo char_to_int is int;
    echo char_to_double is double;
    */
}

function void NativasSimples(){
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA LOWER ---------------------";
    echo lower("SI SALE COMPILADORES 1");

    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA UPPER ---------------------";
    echo upper("si sale compiladores 1");
    
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA ROUND ---------------------";
    const a: double = 60.0 + (23 / 45); // 60.511111
    const b: double = 59.4 + (4 / 45); // 59.488888
    echo "El numero: " + a + " redondeado es: " + round(a);
    echo "El numero: " + b + " redondeado es: " + round(b);

    // length
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA LENGTH --------------------";
    let cadena: string = "Hola mundo";
    echo "La longitud de la cadena: " + cadena + " es: " + len(cadena);
    echo "La longitud del vectorEntero es: " + len(vectorEntero);
    echo "La longitud de vector entradas es: " + len(entradas);

    //truncate
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA TRUNCATE ------------------";

    echo "El numero: " + a + " truncado es: " + truncate(a);
    echo "El numero: " + b + " truncado es: " + truncate(b);

    // funcion is
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA IS ------------------------";
    echo "Es cadena: " + ("Hola" is string);
    echo "Es entero: " + (2024 is int);
    echo "Es double: " + (2024.0 is double);
    echo "Es char: " + ('A' is char);
    echo "Es boolean: " + (true is bool);

    //tostring
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA TOSTRING ------------------";
    echo "El numero: " + 100 + " convertido a cadena es: " + toString(100);
    echo "El numero: " + 99.9 + " convertido a cadena es: " + toString(99.9);
    echo "El boolean: " + true + " convertido a cadena es: " + toString(true);
    echo "El boolean: " + false + " convertido a cadena es: " + toString(false);

    //toCharArray
    echo "--------------------------------------------------------";
    echo "--------------------- NATIVA TOCHARARRAY ------------------";
    let nombreAuxiliar: char[] = toCharArray("FABIAN REYNA");
    let VectorAuxiliar: string = "[";
    for (let i: int = 0; i < len(nombreAuxiliar); i++) {
        VectorAuxiliar = VectorAuxiliar + nombreAuxiliar[i] + "\n";
    }
    VectorAuxiliar = VectorAuxiliar + "]";
    echo VectorAuxiliar;
}


function void main(){
    echo "--------------------------------------------------------";
    echo "-----------------CALIFICACION ARCHIVO 2-----------------";
    echo "--------------------------------------------------------\n";
    vectorSimple();
    vectorDoble();
    Casteos();
    NativasSimples();
    Recursivas();
    //NativasVectores();
}


function void Recursivas(){
    let valor_fibonacci: int = 20;
    let valor_par_impar: int = 70;
    echo "--------------------------------------------------------";
    echo "--------------------- RECURSIVAS -----------------------\n";

    echo "--------------------------------------------------------";
    echo "--------------------- FIBONACCI ------------------------";
    echo "Fibonacci de " + valor_fibonacci + ": " + fibonacci(n = valor_fibonacci) + "\n";


    echo "--------------------------------------------------------";
    echo "--------------------- PAR O IMPAR ----------------------";
    if (par(nump=valor_par_impar) == 1) {
        echo "El numero " + valor_par_impar + " es par \n";
    } else {
        echo "El numero " + valor_par_impar + " es impar \n";
    }

    echo "--------------------------------------------------------";
    echo "--------------------- CONTAR CAMINOS -------------------";
    let m: int = 3;
    let n: int = 3;
    echo "La cantidad de caminos en una cuadricula de " + m + "x" + n + " es: " + contarCaminos(m = m, n = n);
    echo "\n";

    echo "--------------------------------------------------------";
    echo "--------------------- ACKERMAN -------------------------";
    m = 3;
    n = 4;
    //echo "Funcion de Ackerman (" + m + ", " + n + "): " + ackerman(m = m, n = n) + "\n";
    echo "Funcion de Ackerman con puntos (" + m + ", " + n + "): " + ackerman_puntos_menos(m = m, n = n) + "\n";
}

function int fibonacci(n: int){
    if (n > 1) {
        return fibonacci(n = n - 1) + fibonacci(n = n - 2);
    } else if (n == 1) {
        return 1;
    } else if (n == 0) {
        return 0;
    } else {
        echo "Error: n debe ser mayor o igual a 0";
        return 0;
    }
}

function int par(nump: int){
    if (nump == 0) {
        return 1;
    } else {
        return impar(numi=nump - 1);
    }
}

function int impar(numi: int){
    if (numi == 0) {
        return 0;
    } else {
        return par(nump=numi - 1);
    }
}

function int contarCaminos(m: int, n: int){
    if (m == 1 || n == 1) {
        echo "Contar Caminos (" + m + ", " + n + ") = 1";
        return 1;
    } else {
        let resultado: int = contarCaminos(m = m - 1, n = n) + contarCaminos(m = m, n = n - 1);
        echo "Contar Caminos (" + m + ", " + n + ") = Contar Caminos(" + (m - 1) + ", " + n +
            ") + Contar Caminos(" + m + ", " + (n - 1) + ") = " + resultado;
        return resultado;
    }
}

function int ackerman(m: int, n: int){
    return if (n == 0) (n + 1) : (if (m > 0 && n == 0) (ackerman(m = m - 1, n = 1)) : (ackerman(m = m - 1, n = ackerman(m = m, n = n - 1))));
}

function int ackerman_puntos_menos(m: int, n: int){
    if (m == 0) {
        return n + 1;
    } else if (m > 0 && n == 0) {
        return ackerman_puntos_menos(m = m - 1, n = 1);
    } else {
        return ackerman_puntos_menos(m = m - 1, n = ackerman_puntos_menos(m = m, n = n - 1));
    }
}
