/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,32],$V2=[1,40],$V3=[1,41],$V4=[1,23],$V5=[1,34],$V6=[1,33],$V7=[1,35],$V8=[1,36],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,42],$Vg=[2,5,17,21,26,30,56,85,89,90,95,96,97,98,99,100,101,103,105,108],$Vh=[1,54],$Vi=[1,56],$Vj=[1,52],$Vk=[1,53],$Vl=[1,62],$Vm=[1,58],$Vn=[1,63],$Vo=[1,69],$Vp=[1,78],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,101],$VF=[1,104],$VG=[9,42],$VH=[1,113],$VI=[1,115],$VJ=[1,114],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,127],$VW=[1,128],$VX=[1,129],$VY=[9,23,29,31,32,33,34,35,36,37,42,47,48,49,50,51,52,53,54,65,71,130],$VZ=[1,153],$V_=[23,29],$V$=[29,42],$V01=[9,23,29,42,53,54,65,71],$V11=[2,5,17,21,26,30,56,85,87,89,90,95,96,97,98,99,100,101,103,104,105,108],$V21=[9,23,29,31,32,42,47,48,49,50,51,52,53,54,65,71],$V31=[9,23,29,31,32,33,34,37,42,47,48,49,50,51,52,53,54,65,71],$V41=[9,23,29,42,47,48,49,50,51,52,53,54,65,71],$V51=[2,19],$V61=[1,220],$V71=[1,225],$V81=[2,118],$V91=[89,96],$Va1=[1,236],$Vb1=[89,95,96],$Vc1=[1,295],$Vd1=[29,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"funciones":7,"Variables":8,"PYC":9,"incremento_y_decremento":10,"vectores":11,"inst_break":12,"inst_continue":13,"inst_return":14,"subrutinas":15,"ejecutar":16,"EJECUTAR":17,"llamada1":18,"declaracion":19,"asignacion_var":20,"LET":21,"lista_var":22,"DOSPUNTOS":23,"TIPO":24,"var_exp":25,"CONST":26,"IGUAL":27,"expresion":28,"COMA":29,"ID":30,"RESTA":31,"MAS":32,"PRODUCTO":33,"DIV":34,"POTENCIA":35,"RAIZ":36,"MODULO":37,"relacional":38,"logicos":39,"tipo_datos":40,"PIZQ":41,"PDER":42,"casteos":43,"ternario":44,"acceso_vector":45,"funcionesNativas":46,"IGUALDAD":47,"DISTINTO":48,"MENOR":49,"MENORIGUAL":50,"MAYOR":51,"MAYORIGUAL":52,"AND":53,"OR":54,"NOT":55,"IF":56,"NUMBER":57,"DOUBLE":58,"STRING":59,"CHAR":60,"TRUE":61,"FALSE":62,"NULL":63,"CAST":64,"AS":65,"INCREMENTO":66,"DECREMENTO":67,"declaracion_vectores":68,"modificar_vector":69,"CIZQ":70,"CDER":71,"NEW":72,"VECTOR":73,"asignacion_vector":74,"lista_de_lista_valores":75,"tochararray":76,"lista_valores":77,"fn_echo":78,"fn_if":79,"Switch":80,"ciclo_while":81,"ciclo_for":82,"ciclo_do_until":83,"ciclo_loop":84,"ECHO":85,"bloque":86,"ELSE":87,"LLIZQ":88,"LLDER":89,"SWITCH":90,"case":91,"default":92,"lista_casos":93,"casos":94,"CASE":95,"DEFAULT":96,"WHILE":97,"BREAK":98,"CONTINUE":99,"RETURN":100,"FOR":101,"actualizacion_variables":102,"DO":103,"UNTIL":104,"LOOP":105,"declaracion_funciones":106,"Metodos":107,"FUNCTION":108,"casos_parametros":109,"VOID":110,"casos_parametros2":111,"llamada2":112,"lista_valores_funcions":113,"parametros":114,"parametro":115,"parametros_2":116,"parametro_2":117,"lower":118,"upper":119,"round":120,"len":121,"truncate":122,"ls":123,"tostring":124,"LOWER":125,"UPPER":126,"ROUND":127,"LEN":128,"TRUNCATE":129,"IS":130,"TOSTRING":131,"TOCHARARRAY":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PYC",17:"EJECUTAR",21:"LET",23:"DOSPUNTOS",24:"TIPO",26:"CONST",27:"IGUAL",29:"COMA",30:"ID",31:"RESTA",32:"MAS",33:"PRODUCTO",34:"DIV",35:"POTENCIA",36:"RAIZ",37:"MODULO",41:"PIZQ",42:"PDER",47:"IGUALDAD",48:"DISTINTO",49:"MENOR",50:"MENORIGUAL",51:"MAYOR",52:"MAYORIGUAL",53:"AND",54:"OR",55:"NOT",56:"IF",57:"NUMBER",58:"DOUBLE",59:"STRING",60:"CHAR",61:"TRUE",62:"FALSE",63:"NULL",64:"CAST",65:"AS",66:"INCREMENTO",67:"DECREMENTO",70:"CIZQ",71:"CDER",72:"NEW",73:"VECTOR",85:"ECHO",87:"ELSE",88:"LLIZQ",89:"LLDER",90:"SWITCH",95:"CASE",96:"DEFAULT",97:"WHILE",98:"BREAK",99:"CONTINUE",100:"RETURN",101:"FOR",103:"DO",104:"UNTIL",105:"LOOP",108:"FUNCTION",110:"VOID",125:"LOWER",126:"UPPER",127:"ROUND",128:"LEN",129:"TRUNCATE",130:"IS",131:"TOSTRING",132:"TOCHARARRAY"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[16,3],[8,1],[8,1],[19,5],[19,5],[25,0],[25,2],[22,3],[22,1],[20,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[28,1],[28,1],[28,1],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[39,3],[39,3],[39,2],[44,7],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[43,6],[10,2],[10,2],[11,1],[11,1],[68,13],[68,18],[68,8],[68,12],[74,1],[74,3],[75,5],[75,3],[77,3],[77,1],[45,4],[45,7],[69,6],[69,9],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[78,2],[79,5],[79,7],[79,7],[86,3],[86,2],[80,8],[91,1],[91,0],[93,2],[93,1],[94,4],[92,3],[92,0],[81,5],[12,1],[13,1],[14,2],[14,1],[82,9],[102,1],[102,1],[83,7],[84,2],[15,1],[15,1],[15,2],[106,7],[107,7],[18,4],[112,4],[113,0],[113,1],[109,0],[109,1],[114,3],[114,1],[115,5],[115,3],[115,5],[115,7],[111,0],[111,1],[116,3],[116,1],[117,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[118,4],[119,4],[120,4],[121,4],[122,4],[123,3],[124,4],[76,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return  new AST($$[$0-1],errores);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 22: case 73: case 95:
 this.$ = [$$[$0]];
break;
case 4: case 11: case 12: case 79: case 80: case 81: case 82: case 83: case 84:
this.$ = $$[$0];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 78:
this.$ = $$[$0-1];
break;
case 13:
errores.push(new Error_(yytext, _$[$0].first_line, _$[$0].first_column, TipoError.SINTACTICO));
break;
case 14:
 this.$ = new Ejecutar($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 15: case 16: case 20: case 68: case 92: case 105: case 106: case 109: case 110: case 117: case 119: case 127: case 131: case 132: case 133: case 134: case 135: case 136: case 137:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = new Declaracion($$[$0-1],$$[$0-3],$$[$0],false,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 18:
 this.$ = new Declaracion($$[$0-1],$$[$0-3],$$[$0],true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 19: case 93: case 98:
 this.$ = null; 
break;
case 21: case 72:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 23:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 24:
this.$ = new Aritmetica(new Basico("0",TipoDato.ENTERO,0,0),$$[$0],OpAritmetico.NEGACION,0,0);
break;
case 25:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.SUMA,0,0);
break;
case 26:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.RESTA,0,0);
break;
case 27:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.PRODUCTO,0,0);
break;
case 28:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.DIVISION,0,0);
break;
case 29:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.POTENCIA,0,0);
break;
case 30:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.RAIZ,0,0);
break;
case 31:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.MODULO,0,0);
break;
case 32: case 33:
 this.$ = $$[$0] 
break;
case 34: case 37: case 38: case 39: case 40: case 41: case 62: case 63:
 this.$ = $$[$0];
break;
case 35:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column)
break;
case 36:
 this.$ = $$[$0-1]
break;
case 42:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.IGUALDAD,0,0);
break;
case 43:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.DISTINTO,0,0);
break;
case 44:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MENOR,0,0);
break;
case 45:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MENORIGUAL,0,0);
break;
case 46:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MAYOR,0,0);
break;
case 47:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MAYORIGUAL,0,0);
break;
case 48:
 this.$= new Logico($$[$0-2],$$[$0],OperadorLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49:
 this.$= new Logico($$[$0-2],$$[$0],OperadorLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 50:
 this.$= new Logico($$[$0],null,OperadorLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 51:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 52:
 this.$ = new Basico($$[$0],TipoDato.ENTERO,0,0);
break;
case 53:
 this.$ = new Basico($$[$0],TipoDato.DECIMAL,0,0);
break;
case 54:
 this.$ = new Basico($$[$0],TipoDato.STRING,0,0);
break;
case 55:
 this.$ = new Basico($$[$0],TipoDato.CHAR,0,0);
break;
case 56: case 57:
 this.$ = new Basico($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 58:
 this.$ = new Basico($$[$0],TipoDato.NULL,0,0); 
break;
case 59:
 this.$ = new Casteo($$[$0-1],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 60: case 61:
 this.$ = new Incremento_Decremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 64:
 this.$ = new Vector1($$[$0-11],$$[$0-9],$$[$0-3],$$[$0-1],null,_$[$0-12].first_line,_$[$0-12].first_column);
break;
case 65:
 this.$ = new Vector1($$[$0-16],$$[$0-14],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-17].first_line,_$[$0-17].first_column);
break;
case 66:
 this.$ = new Vector2($$[$0-6],$$[$0-4],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,true);
break;
case 67:
 this.$ = new Vector2($$[$0-10],$$[$0-8],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column,false);
break;
case 69: case 111:
 this.$ = $$[$0-1]; 
break;
case 70:
 this.$ = $$[$0-4]; this.$.push($$[$0-1]);
break;
case 71:
 this.$ = [$$[$0-1]];
break;
case 74:
 this.$ = new AccesoVector($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 75:
 this.$ = new AccesoVector($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 76:
 this.$ = new ModificarVector($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 77:
 this.$ = new ModificarVector($$[$0-8],$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 85:
 this.$ = new Echo($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 86:
 this.$ = new Fn_if($$[$0-2],$$[$0],null,null); 
break;
case 87:
 this.$ = new Fn_if($$[$0-4],$$[$0-2],$$[$0],null); 
break;
case 88:
 this.$ = new Fn_if($$[$0-4],$$[$0-2],null,$$[$0]); 
break;
case 89:
 this.$ = new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 90:
 this.$ = new Bloque([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 91:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 94:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 96:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 97:
 this.$ = new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 99:
this.$ = new CWhile($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 100:
this.$ = new Break(_$[$0].first_line,_$[$0].first_column)
break;
case 101:
this.$ = new Continue(_$[$0].first_line,_$[$0].first_column)
break;
case 102:
this.$ = new Return(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0])
break;
case 103:
this.$ = new Return(_$[$0].first_line,_$[$0].first_column,null)
break;
case 104:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 107:
 this.$ = new DoUntil($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 108:
 this.$ = new Loop($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 112: case 113:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 114:
 this.$ = new Llamada($$[$0-3],$$[$0-1],true,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 115:
 this.$ = new Llamada($$[$0-3],$$[$0-1],false,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 116: case 118: case 126:
 this.$ = []; 
break;
case 120: case 128:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 121: case 129:
 this.$ = [$$[$0]]; 
break;
case 122:
 this.$ = {id:$$[$0-4], tipo:$$[$0-2], exp:$$[$0], vector: false, simple: false } 
break;
case 123:
 this.$ = {id:$$[$0-2], tipo:$$[$0], exp:null, vector: false, simple: false} 
break;
case 124:
 this.$ = {id:$$[$0-4], tipo:$$[$0-2], exp:null, vector: true, simple: true} 
break;
case 125:
 this.$ = {id:$$[$0-6], tipo:$$[$0-4], exp:null, vector: true, simple: false} 
break;
case 130:
 this.$ = {id:$$[$0-2], exp:$$[$0]} 
break;
case 138:
 this.$ = new LowerUpper($$[$0-1],true,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 139:
 this.$ = new LowerUpper($$[$0-1],false,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 140:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 141:
 this.$ = new Len($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 142:
 this.$ = new Truncate($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 143:
 this.$ = new Is($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 144:
 this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 145:
 this.$ = new ToCharArray($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},{1:[3]},{2:$V0,5:[1,43],6:44,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{9:[1,45]},{9:[1,46]},{9:[1,47]},{9:[1,48]},{9:[1,49]},{9:[1,50]},o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{9:[1,51]},o($Vg,[2,79]),o($Vg,[2,80]),o($Vg,[2,81]),o($Vg,[2,82]),o($Vg,[2,83]),o($Vg,[2,84]),{9:[2,15]},{9:[2,16]},{27:$Vh,41:$Vi,66:$Vj,67:$Vk,70:[1,55]},{9:[2,62]},{9:[2,63]},{9:[2,100]},{9:[2,101]},{9:[2,103],18:67,28:57,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($Vg,[2,109]),o($Vg,[2,110]),{9:[1,92]},{18:93,30:[1,94]},{18:67,28:95,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{41:[1,96]},{41:[1,97]},{41:[1,98]},{41:[1,99]},{86:100,88:$VE},{86:102,88:$VE},{22:103,30:$VF},{22:105,30:$VF},{24:[1,106],110:[1,107]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,78]),o($VG,[2,60]),o($VG,[2,61]),{18:67,28:108,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:109,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{30:$VH,42:[2,126],111:110,116:111,117:112},{9:[2,102],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{18:67,28:130,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($VY,[2,32]),o($VY,[2,33]),o($VY,[2,34]),o($VY,[2,35],{41:$Vi,70:[1,131]}),{18:67,28:132,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($VY,[2,37]),o($VY,[2,38]),o($VY,[2,39]),o($VY,[2,40]),o($VY,[2,41]),{18:67,28:133,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($VY,[2,52]),o($VY,[2,53]),o($VY,[2,54]),o($VY,[2,55]),o($VY,[2,56]),o($VY,[2,57]),o($VY,[2,58]),{41:[1,134]},{41:[1,135]},o($VY,[2,131]),o($VY,[2,132]),o($VY,[2,133]),o($VY,[2,134]),o($VY,[2,135]),o($VY,[2,136]),o($VY,[2,137]),{41:[1,136]},{41:[1,137]},{41:[1,138]},{41:[1,139]},{41:[1,140]},{41:[1,141]},o($Vg,[2,111]),{9:[1,142]},{41:$Vi},{9:[2,85],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{18:67,28:143,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:144,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:145,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{8:146,19:21,20:22,21:[1,147],26:$V3,30:[1,148]},{104:[1,149]},{2:$V0,4:150,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,89:[1,151],90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},o($Vg,[2,108]),{23:[1,152],29:$VZ},o($V_,[2,22]),{23:[1,154],29:$VZ},{30:[1,155]},{30:[1,156]},o($VG,[2,23],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX}),{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,157],130:$VX},{42:[1,158]},{29:[1,159],42:[2,127]},o($V$,[2,129]),{27:[1,160]},{18:67,28:161,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:162,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:163,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:164,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:165,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:166,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:167,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:168,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:169,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:170,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:171,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:172,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:173,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:174,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:175,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{24:[1,176]},o($VY,[2,24]),{18:67,28:177,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,178],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},o($V01,[2,50],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,130:$VX}),{18:67,28:179,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:180,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:181,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:182,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:183,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:184,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:185,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:186,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($Vg,[2,14]),{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,187],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,188],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,189],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{9:[1,190]},{22:191,30:$VF},{27:$Vh},{41:[1,192]},{2:$V0,6:44,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,89:[1,193],90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},o($V11,[2,90]),{24:[1,194]},{30:[1,195]},{24:[1,196]},{41:[1,197]},{41:[1,198]},{27:[1,199],70:[1,200]},o($VY,[2,114]),{30:$VH,117:201},{18:67,28:202,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($V21,[2,25],{33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V21,[2,26],{33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V31,[2,27],{35:$VM,36:$VN,130:$VX}),o($V31,[2,28],{35:$VM,36:$VN,130:$VX}),o($V31,[2,29],{130:$VX}),o($V31,[2,30],{130:$VX}),o($V31,[2,31],{35:$VM,36:$VN,130:$VX}),o($V41,[2,42],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V41,[2,43],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V41,[2,44],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V41,[2,45],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V41,[2,46],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o($V41,[2,47],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,130:$VX}),o([9,23,29,42,53,65,71],[2,48],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,54:$VW,130:$VX}),o($V01,[2,49],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,130:$VX}),o($VY,[2,143]),{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,203],130:$VX},o($VY,[2,36]),{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,65:[1,204],130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,205],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,206],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,207],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,208],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,209],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,210],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,211],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{86:212,88:$VE},{88:[1,213]},{86:214,88:$VE},{18:67,28:215,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{23:[1,216],29:$VZ},{18:67,28:217,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($V11,[2,89]),{9:$V51,25:218,27:$V61,70:[1,219]},o($V_,[2,21]),{9:$V51,25:221,27:$V61},{30:$V71,42:$V81,109:222,114:223,115:224},{30:$V71,42:$V81,109:226,114:223,115:224},{18:67,28:227,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:228,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($V$,[2,128]),o($V$,[2,130],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX}),o($VY,[2,74],{70:[1,229]}),{24:[1,230]},{18:67,28:231,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($VY,[2,138]),o($VY,[2,139]),o($VY,[2,140]),o($VY,[2,141]),o($VY,[2,142]),o($VY,[2,144]),o($Vg,[2,86],{87:[1,232]}),o($V91,[2,93],{91:233,93:234,94:235,95:$Va1}),o($Vg,[2,99]),{9:[1,237],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{24:[1,238]},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,239],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{9:[2,17]},{71:[1,240]},{18:67,28:241,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{9:[2,18]},{42:[1,242]},{29:[1,243],42:[2,119]},o($V$,[2,121]),{23:[1,244]},{42:[1,245]},{9:[2,76],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,246],130:$VX},{18:67,28:247,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{42:[1,248]},{23:[1,249],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{56:$V5,79:251,86:250,88:$VE},{89:[2,98],92:252,96:[1,253]},o($V91,[2,92],{94:254,95:$Va1}),o($Vb1,[2,95]),{18:67,28:255,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{10:257,20:258,30:[1,259],102:256},{9:$V51,25:218,27:$V61},{9:[1,260]},{27:[1,261],70:[1,262]},{9:[2,20],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{86:263,88:$VE},{30:$V71,115:264},{24:[1,265]},{86:266,88:$VE},{27:[1,267]},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,268],130:$VX},o($VY,[2,59]),{18:67,28:269,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($Vg,[2,87]),o($Vg,[2,88]),{89:[1,270]},{23:[1,271]},o($Vb1,[2,94]),{23:[1,272],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{42:[1,273]},{42:[2,105]},{42:[2,106]},{27:$Vh,66:$Vj,67:$Vk},o($Vg,[2,107]),{70:[1,277],72:[1,274],74:275,76:276,132:[1,278]},{71:[1,279]},o($Vg,[2,112]),o($V$,[2,120]),o($V$,[2,123],{27:[1,280],70:[1,281]}),o($Vg,[2,113]),{18:67,28:282,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($VY,[2,75]),o([9,23,29,42,65,71],[2,51],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX}),o($Vg,[2,91]),{2:$V0,4:283,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},{2:$V0,4:284,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},{86:285,88:$VE},{73:[1,286]},{9:[2,66]},{9:[2,68]},{18:67,28:288,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,77:287,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{41:[1,289]},{27:[1,290]},{18:67,28:291,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{71:[1,292]},{9:[2,77],31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{2:$V0,6:44,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:31,19:21,20:22,21:$V2,26:$V3,30:$V4,56:$V5,68:24,69:25,78:14,79:15,80:16,81:17,82:18,83:19,84:20,85:$V6,89:[2,97],90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,106:29,107:30,108:$Vf},o($Vb1,[2,96],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,78:14,79:15,80:16,81:17,82:18,83:19,84:20,19:21,20:22,68:24,69:25,106:29,107:30,18:31,6:44,2:$V0,17:$V1,21:$V2,26:$V3,30:$V4,56:$V5,85:$V6,90:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,103:$Vd,105:$Ve,108:$Vf}),o($Vg,[2,104]),{24:[1,293]},{29:$Vc1,71:[1,294]},o($Vd1,[2,73],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX}),{18:67,28:296,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{70:[1,298],72:[1,297]},o($V$,[2,122],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX}),o($V$,[2,124],{70:[1,299]}),{70:[1,300]},{9:[2,69]},{18:67,28:301,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,42:[1,302],47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX},{73:[1,303]},{70:[1,305],75:304},{71:[1,306]},{18:67,28:307,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($Vd1,[2,72],{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,130:$VX}),{9:[2,145]},{24:[1,308]},{29:[1,310],71:[1,309]},{18:67,28:288,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,77:311,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($V$,[2,125]),{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,312],130:$VX},{70:[1,313]},{9:[2,67]},{70:[1,314]},{29:$Vc1,71:[1,315]},{9:[2,64]},{18:67,28:316,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{18:67,28:288,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,77:317,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},o($Vd1,[2,71]),{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,318],130:$VX},{29:$Vc1,71:[1,319]},{70:[1,320]},o($Vd1,[2,70]),{18:67,28:321,30:$Vl,31:$Vm,38:59,39:60,40:61,41:$Vn,43:64,44:65,45:66,46:68,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,118:79,119:80,120:81,121:82,122:83,123:84,124:85,125:$Vy,126:$Vz,127:$VA,128:$VB,129:$VC,131:$VD},{31:$VI,32:$VJ,33:$VK,34:$VL,35:$VM,36:$VN,37:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:$VU,53:$VV,54:$VW,71:[1,322],130:$VX},{9:[2,65]}],
defaultActions: {21:[2,15],22:[2,16],24:[2,62],25:[2,63],26:[2,100],27:[2,101],43:[2,1],218:[2,17],221:[2,18],257:[2,105],258:[2,106],275:[2,66],276:[2,68],294:[2,69],302:[2,145],309:[2,67],312:[2,64],322:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Se accede a dist porque allí se encuentra el compilado
    const { Basico } = require("../dist/src/Expresiones/Basico");
    const { TipoDato } = require("../dist/src/Expresiones/Tipos");
    const { AST } = require("../dist/src/AST/AST");
    const { Aritmetica,OpAritmetico } = require("../dist/src/Expresiones/Aritmetica");
    const { Relacional,OperadorRelacional } = require("../dist/src/Expresiones/Relacional");
    const { Logico ,OperadorLogico } = require("../dist/src/Expresiones/Logicos");
    const { Acceso  } = require("../dist/src/Expresiones/Acceso");
    const { Echo } = require("../dist/src/Instrucciones/Echo");
    const { Declaracion } = require("../dist/src/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/src/Instrucciones/Asignacion");
    const { Fn_if } = require("../dist/src/Instrucciones/Control/If");
    const { Bloque } = require("../dist/src/Instrucciones/Bloque");
    const { Casteo } = require("../dist/src/Expresiones/Casteo");
    const { Incremento_Decremento } = require("../dist/src/Instrucciones/Incremento_Decremento");
    const { Vector1 } = require("../dist/src/Instrucciones/Vector1");
    const { CWhile } = require("../dist/src/Instrucciones/Ciclos/While");
    const { Break } = require("../dist/src/Instrucciones/Break");
    const { Ternario } = require("../dist/src/Expresiones/Ternario");
    const { AccesoVector } = require("../dist/src/Expresiones/AccesoVector");
    const { ModificarVector } = require("../dist/src/Instrucciones/ModificarVector");
    const { Vector2 } = require("../dist/src/Instrucciones/Vector2");
    const { Continue } = require("../dist/src/Instrucciones/Continue");
    const { Return } = require("../dist/src/Instrucciones/Return");
    const { Case } = require("../dist/src/Instrucciones/Control/Case");
    const { Default } = require("../dist/src/Instrucciones/Control/Default");
    const { Switch } = require("../dist/src/Instrucciones/Control/Switch");
    const { For } = require("../dist/src/Instrucciones/Ciclos/For");
    const { DoUntil } = require("../dist/src/Instrucciones/Ciclos/DoUntil");
    const { Loop } = require("../dist/src/Instrucciones/Ciclos/Loop");
    const { Funcion } = require("../dist/src/Instrucciones/Funcion");
    const { Llamada } = require("../dist/src/Instrucciones/Llamada");
    const { Ejecutar } = require("../dist/src/Instrucciones/Ejecutar");
    const { LowerUpper } = require("../dist/src/Expresiones/FuncionesDelLenguaje/LowerUpper");
    const { Round } = require("../dist/src/Expresiones/FuncionesDelLenguaje/Round");
    const { Len } = require("../dist/src/Expresiones/FuncionesDelLenguaje/Len");
    const { Truncate } = require("../dist/src/Expresiones/FuncionesDelLenguaje/Truncate");
    const { Is } = require("../dist/src/Expresiones/FuncionesDelLenguaje/Is");
    const { ToString } = require("../dist/src/Expresiones/FuncionesDelLenguaje/ToString");
    const { ToCharArray } = require("../dist/src/Expresiones/FuncionesDelLenguaje/ToCharArray");
    const { Error_ } = require("../dist/src/Error/Errores_.js");
    const { TipoError } = require("../dist/src/Error/Errores_.js");
    const { agregarError } = require("../dist/src/AST/AST");
    

    let errores = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR ESPACIOS */
break;
case 1:/* IGNORAR COMENTARIOS DE LINEA*/
break;
case 2:/* IGNORAR COMENTARIOS DE BLOQUE */
break;
case 3:return 63;
break;
case 4:return 85;
break;
case 5:return 56;
break;
case 6:return 87;
break;
case 7:return 90;
break;
case 8:return 95;
break;
case 9:return 96;
break;
case 10:return 97;
break;
case 11:return 98;
break;
case 12:return 99;
break;
case 13:return 100;
break;
case 14:return 101;
break;
case 15:return 103;
break;
case 16:return 104;
break;
case 17:return 105;
break;
case 18:return 110;
break;
case 19:return 108;
break;
case 20:return 21;
break;
case 21:return 26;
break;
case 22:return 72;
break;
case 23:return 73;
break;
case 24:return 64;
break;
case 25:return 65;
break;
case 26:return 125;
break;
case 27:return 126;
break;
case 28:return 127;
break;
case 29:return 128;
break;
case 30:return 129;
break;
case 31:return 130;
break;
case 32:return 131;
break;
case 33:return 132;
break;
case 34:return 17;
break;
case 35:return 66;
break;
case 36:return 67;
break;
case 37:return 32;
break;
case 38:return 31;
break;
case 39:return 33;
break;
case 40:return 34;
break;
case 41:return 35;
break;
case 42:return 36;
break;
case 43:return 37;
break;
case 44:return 47;
break;
case 45:return 48;
break;
case 46:return 50;
break;
case 47:return 52;
break;
case 48:return 49;
break;
case 49:return 51;
break;
case 50:return 53;
break;
case 51:return 54;
break;
case 52:return 55;
break;
case 53:return 41;
break;
case 54:return 42;
break;
case 55:return 88;
break;
case 56:return 89;
break;
case 57:return 9;
break;
case 58:return 29;
break;
case 59:return 'PUNTO';
break;
case 60:return 23;
break;
case 61:return 70;
break;
case 62:return 71;
break;
case 63:return 27;
break;
case 64:return 58;
break;
case 65:return 57;
break;
case 66:
    var texto = yy_.yytext.substr(1, yy_.yyleng - 2);
    texto = texto.replace(/\\n/g, "\n");
    texto = texto.replace(/\\\\/g, "\\");
    texto = texto.replace(/\\"/g, "\"");
    texto = texto.replace(/\\t/g, "\t");
    texto = texto.replace(/\\r/g, "\r");
    texto = texto.replace(/\\'/g, "'");
    texto = texto.replace(/\\b/g, "\b");
    yy_.yytext = texto;
    return 59;

break;
case 67:
    var texto = yy_.yytext.substr(1, yy_.yyleng - 2);
    texto = texto.replace(/\\n/g, "\n");
    texto = texto.replace(/\\\\/g, "\\");
    texto = texto.replace(/\\'/g, "'");
    texto = texto.replace(/\\t/g, "\t");
    texto = texto.replace(/\\r/g, "\r");
    texto = texto.replace(/\\b/g, "\b");
    yy_.yytext = texto;
    return 60;

break;
case 68:return 61;
break;
case 69:return 62;
break;
case 70:return 24;
break;
case 71:return 30;
break;
case 72:return 5;
break;
case 73: errores.push(new Error_(yy_.yytext, yy_.yylloc.first_line + 1, yy_.yylloc.first_column + 1, TipoError.LEXICO));
    return;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:echo\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:Switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:loop\b)/i,/^(?:void\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:new\b)/i,/^(?:vector\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:truncate\b)/i,/^(?:is\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:ejecutar\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"([^\"\\]|\\[btnr\"\'\\])*")/i,/^(?:'([^\'\\]|\\[btnr\"\'\\])')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int|double|bool|char|string|NULL\b)/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}