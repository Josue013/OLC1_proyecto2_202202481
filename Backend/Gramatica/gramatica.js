/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,32],$V2=[1,19],$V3=[1,26],$V4=[1,25],$V5=[1,27],$V6=[1,28],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,29],$Vb=[1,30],$Vc=[5,17,22,26,51,77,81,82,87,88,89,90,91,92,93,95],$Vd=[1,44],$Ve=[1,42],$Vf=[1,43],$Vg=[1,51],$Vh=[1,47],$Vi=[1,52],$Vj=[1,56],$Vk=[1,65],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,72],$Vu=[1,74],$Vv=[9,38],$Vw=[1,79],$Vx=[1,78],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[9,19,25,27,28,29,30,31,32,33,38,42,43,44,45,46,47,48,49,60,66],$VM=[1,108],$VN=[19,25],$VO=[9,19,25,38,48,49,60,66],$VP=[9,19,25,27,28,38,42,43,44,45,46,47,48,49,60,66],$VQ=[9,19,25,27,28,29,30,33,38,42,43,44,45,46,47,48,49,60,66],$VR=[9,19,25,38,42,43,44,45,46,47,48,49,60,66],$VS=[2,15],$VT=[1,153],$VU=[81,88],$VV=[1,164],$VW=[81,87,88],$VX=[1,207],$VY=[25,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"funciones":7,"Variables":8,"PYC":9,"incremento_y_decremento":10,"vectores":11,"inst_break":12,"inst_continue":13,"inst_return":14,"declaracion":15,"asignacion_var":16,"LET":17,"lista_var":18,"DOSPUNTOS":19,"TIPO":20,"var_exp":21,"CONST":22,"IGUAL":23,"expresion":24,"COMA":25,"ID":26,"RESTA":27,"MAS":28,"PRODUCTO":29,"DIV":30,"POTENCIA":31,"RAIZ":32,"MODULO":33,"relacional":34,"logicos":35,"tipo_datos":36,"PIZQ":37,"PDER":38,"casteos":39,"ternario":40,"acceso_vector":41,"IGUALDAD":42,"DISTINTO":43,"MENOR":44,"MENORIGUAL":45,"MAYOR":46,"MAYORIGUAL":47,"AND":48,"OR":49,"NOT":50,"IF":51,"NUMBER":52,"DOUBLE":53,"STRING":54,"CHAR":55,"TRUE":56,"FALSE":57,"NULL":58,"CAST":59,"AS":60,"INCREMENTO":61,"DECREMENTO":62,"declaracion_vectores":63,"modificar_vector":64,"CIZQ":65,"CDER":66,"NEW":67,"VECTOR":68,"lista_valores":69,"lista_de_lista_valores":70,"fn_echo":71,"fn_if":72,"Switch":73,"ciclo_while":74,"ciclo_for":75,"ciclo_do_until":76,"ECHO":77,"bloque":78,"ELSE":79,"LLIZQ":80,"LLDER":81,"SWITCH":82,"case":83,"default":84,"lista_casos":85,"casos":86,"CASE":87,"DEFAULT":88,"WHILE":89,"BREAK":90,"CONTINUE":91,"RETURN":92,"FOR":93,"actualizacion_variables":94,"DO":95,"UNTIL":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PYC",17:"LET",19:"DOSPUNTOS",20:"TIPO",22:"CONST",23:"IGUAL",25:"COMA",26:"ID",27:"RESTA",28:"MAS",29:"PRODUCTO",30:"DIV",31:"POTENCIA",32:"RAIZ",33:"MODULO",37:"PIZQ",38:"PDER",42:"IGUALDAD",43:"DISTINTO",44:"MENOR",45:"MENORIGUAL",46:"MAYOR",47:"MAYORIGUAL",48:"AND",49:"OR",50:"NOT",51:"IF",52:"NUMBER",53:"DOUBLE",54:"STRING",55:"CHAR",56:"TRUE",57:"FALSE",58:"NULL",59:"CAST",60:"AS",61:"INCREMENTO",62:"DECREMENTO",65:"CIZQ",66:"CDER",67:"NEW",68:"VECTOR",77:"ECHO",79:"ELSE",80:"LLIZQ",81:"LLDER",82:"SWITCH",87:"CASE",88:"DEFAULT",89:"WHILE",90:"BREAK",91:"CONTINUE",92:"RETURN",93:"FOR",95:"DO",96:"UNTIL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[8,1],[8,1],[15,5],[15,5],[21,0],[21,2],[18,3],[18,1],[16,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,3],[24,1],[24,1],[24,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[35,3],[35,3],[35,2],[40,7],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[39,6],[10,2],[10,2],[11,1],[11,1],[63,13],[63,18],[63,10],[63,12],[70,5],[70,3],[69,3],[69,1],[41,4],[41,7],[64,6],[64,9],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[71,2],[72,5],[72,7],[72,7],[78,3],[73,8],[83,1],[83,0],[85,2],[85,1],[86,4],[84,3],[84,0],[74,5],[12,1],[13,1],[14,2],[14,1],[75,9],[94,1],[94,1],[76,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return  new AST($$[$0-1]) 
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 18: case 65: case 85:
 this.$ = [$$[$0]];
break;
case 4: case 71: case 72: case 73: case 74: case 75:
this.$ = $$[$0];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 70:
this.$ = $$[$0-1];
break;
case 11: case 12: case 16: case 82: case 95: case 96:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = new Declaracion($$[$0-1],$$[$0-3],$$[$0],false,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 14:
 this.$ = new Declaracion($$[$0-1],$$[$0-3],$$[$0],true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 15: case 83: case 88:
 this.$ = null; 
break;
case 17: case 64:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 19:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$ = new Aritmetica(new Basico("0",TipoDato.ENTERO,0,0),$$[$0],OpAritmetico.NEGACION,0,0);
break;
case 21:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.SUMA,0,0);
break;
case 22:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.RESTA,0,0);
break;
case 23:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.PRODUCTO,0,0);
break;
case 24:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.DIVISION,0,0);
break;
case 25:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.POTENCIA,0,0);
break;
case 26:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.RAIZ,0,0);
break;
case 27:
this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetico.MODULO,0,0);
break;
case 28: case 29:
 this.$ = $$[$0] 
break;
case 30: case 33: case 34: case 35: case 56: case 57:
 this.$ = $$[$0];
break;
case 31:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column)
break;
case 32:
 this.$ = $$[$0-1]
break;
case 36:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.IGUALDAD,0,0);
break;
case 37:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.DISTINTO,0,0);
break;
case 38:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MENOR,0,0);
break;
case 39:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MENORIGUAL,0,0);
break;
case 40:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MAYOR,0,0);
break;
case 41:
 this.$ = new Relacional($$[$0-2],$$[$0],OperadorRelacional.MAYORIGUAL,0,0);
break;
case 42:
 this.$= new Logico($$[$0-2],$$[$0],OperadorLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 43:
 this.$= new Logico($$[$0-2],$$[$0],OperadorLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 44:
 this.$= new Logico($$[$0],null,OperadorLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 45:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 46:
 this.$ = new Basico($$[$0],TipoDato.ENTERO,0,0);
break;
case 47:
 this.$ = new Basico($$[$0],TipoDato.DECIMAL,0,0);
break;
case 48:
 this.$ = new Basico($$[$0],TipoDato.STRING,0,0);
break;
case 49:
 this.$ = new Basico($$[$0],TipoDato.CHAR,0,0);
break;
case 50: case 51:
 this.$ = new Basico($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 52:
 this.$ = new Basico($$[$0],TipoDato.NULL,0,0); 
break;
case 53:
 this.$ = new Casteo($$[$0-1],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 54: case 55:
 this.$ = new Incremento_Decremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 58:
 this.$ = new Vector1($$[$0-11],$$[$0-9],$$[$0-3],$$[$0-1],null,_$[$0-12].first_line,_$[$0-12].first_column);
break;
case 59:
 this.$ = new Vector1($$[$0-16],$$[$0-14],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-17].first_line,_$[$0-17].first_column);
break;
case 60:
 this.$ = new Vector2($$[$0-8],$$[$0-6],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column,true);
break;
case 61:
 this.$ = new Vector2($$[$0-10],$$[$0-8],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column,false);
break;
case 62:
 this.$ = $$[$0-4]; this.$.push($$[$0-1]);
break;
case 63:
 this.$ = [$$[$0-1]];
break;
case 66:
 this.$ = new AccesoVector($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 67:
 this.$ = new AccesoVector($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 68:
 this.$ = new ModificarVector($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 69:
 this.$ = new ModificarVector($$[$0-8],$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 76:
 this.$ = new Echo($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 77:
 this.$ = new Fn_if($$[$0-2],$$[$0],null,null); 
break;
case 78:
 this.$ = new Fn_if($$[$0-4],$$[$0-2],$$[$0],null); 
break;
case 79:
 this.$ = new Fn_if($$[$0-4],$$[$0-2],null,$$[$0]); 
break;
case 80:
 this.$ = new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 81:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 84:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 86:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 87:
 this.$ = new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 89:
this.$ = new CWhile($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 90:
this.$ = new Break(_$[$0].first_line,_$[$0].first_column)
break;
case 91:
this.$ = new Continue(_$[$0].first_line,_$[$0].first_column)
break;
case 92:
this.$ = new Return($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 93:
this.$ = new Return(null,_$[$0].first_line,_$[$0].first_column)
break;
case 94:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column); 
break;
case 97:
 this.$ = new DoUntil($$[$0-5],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},{1:[3]},{5:[1,33],6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),{9:[1,35]},{9:[1,36]},{9:[1,37]},{9:[1,38]},{9:[1,39]},{9:[1,40]},{9:[1,41]},o($Vc,[2,71]),o($Vc,[2,72]),o($Vc,[2,73]),o($Vc,[2,74]),o($Vc,[2,75]),{9:[2,11]},{9:[2,12]},{23:$Vd,61:$Ve,62:$Vf,65:[1,45]},{9:[2,56]},{9:[2,57]},{9:[2,90]},{9:[2,91]},{9:[2,93],24:46,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:66,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{37:[1,67]},{37:[1,68]},{37:[1,69]},{37:[1,70]},{78:71,80:$Vt},{18:73,26:$Vu},{18:75,26:$Vu},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,70]),o($Vv,[2,54]),o($Vv,[2,55]),{24:76,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:77,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{9:[2,92],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{24:93,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VL,[2,28]),o($VL,[2,29]),o($VL,[2,30]),o($VL,[2,31],{65:[1,94]}),{24:95,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VL,[2,33]),o($VL,[2,34]),o($VL,[2,35]),{24:96,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),{37:[1,97]},{37:[1,98]},{9:[2,76],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{24:99,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:100,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:101,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{8:102,15:17,16:18,17:[1,103],22:$V1,26:[1,104]},{96:[1,105]},{4:106,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},{19:[1,107],25:$VM},o($VN,[2,18]),{19:[1,109],25:$VM},o($Vv,[2,19],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,110]},{24:111,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:112,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:113,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:114,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:115,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:116,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:117,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:118,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:119,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:120,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:121,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:122,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:123,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:124,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:125,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VL,[2,20]),{24:126,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,38:[1,127],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},o($VO,[2,44],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),{24:128,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:129,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,38:[1,130],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,38:[1,131],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,38:[1,132],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{9:[1,133]},{18:134,26:$Vu},{23:$Vd},{37:[1,135]},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,81:[1,136],82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},{20:[1,137]},{26:[1,138]},{20:[1,139]},{23:[1,140],65:[1,141]},o($VP,[2,21],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VP,[2,22],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VQ,[2,23],{31:$VA,32:$VB}),o($VQ,[2,24],{31:$VA,32:$VB}),o($VQ,[2,25]),o($VQ,[2,26]),o($VQ,[2,27],{31:$VA,32:$VB}),o($VR,[2,36],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VR,[2,37],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VR,[2,38],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VR,[2,39],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VR,[2,40],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o($VR,[2,41],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC}),o([9,19,25,38,48,60,66],[2,42],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,49:$VK}),o($VO,[2,43],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI}),{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,142]},o($VL,[2,32]),{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,60:[1,143]},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,38:[1,144],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{78:145,80:$Vt},{80:[1,146]},{78:147,80:$Vt},{24:148,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{19:[1,149],25:$VM},{24:150,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o([5,17,22,26,51,77,79,81,82,87,88,89,90,91,92,93,95,96],[2,80]),{9:$VS,21:151,23:$VT,65:[1,152]},o($VN,[2,17]),{9:$VS,21:154,23:$VT},{24:155,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:156,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VL,[2,66],{65:[1,157]}),{20:[1,158]},{24:159,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($Vc,[2,77],{79:[1,160]}),o($VU,[2,83],{83:161,85:162,86:163,87:$VV}),o($Vc,[2,89]),{9:[1,165],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{20:[1,166]},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,38:[1,167],42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{9:[2,13]},{66:[1,168]},{24:169,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{9:[2,14]},{9:[2,68],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,170]},{24:171,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{38:[1,172]},{19:[1,173],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{51:$V3,72:175,78:174,80:$Vt},{81:[2,88],84:176,88:[1,177]},o($VU,[2,82],{86:178,87:$VV}),o($VW,[2,85]),{24:179,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{10:181,16:182,26:[1,183],94:180},{9:$VS,21:151,23:$VT},{9:[1,184]},{23:[1,185],65:[1,186]},{9:[2,16],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{23:[1,187]},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,188]},o($VL,[2,53]),{24:189,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($Vc,[2,78]),o($Vc,[2,79]),{81:[1,190]},{19:[1,191]},o($VW,[2,84]),{19:[1,192],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{38:[1,193]},{38:[2,95]},{38:[2,96]},{23:$Vd,61:$Ve,62:$Vf},o($Vc,[2,97]),{65:[1,195],67:[1,194]},{66:[1,196]},{24:197,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VL,[2,67]),o($VL,[2,45]),o($Vc,[2,81]),{4:198,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},{4:199,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},{78:200,80:$Vt},{68:[1,201]},{24:203,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,69:202},{23:[1,204]},{9:[2,69],27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:17,16:18,17:$V0,22:$V1,26:$V2,51:$V3,63:20,64:21,71:11,72:12,73:13,74:14,75:15,76:16,77:$V4,81:[2,87],82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb},o($VW,[2,86],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,71:11,72:12,73:13,74:14,75:15,76:16,15:17,16:18,63:20,64:21,6:34,17:$V0,22:$V1,26:$V2,51:$V3,77:$V4,82:$V5,89:$V6,90:$V7,91:$V8,92:$V9,93:$Va,95:$Vb}),o($Vc,[2,94]),{20:[1,205]},{25:$VX,66:[1,206]},o($VY,[2,65],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),{65:[1,209],67:[1,208]},{65:[1,210]},{9:[2,60]},{24:211,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{68:[1,212]},{65:[1,214],70:213},{24:215,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VY,[2,64],{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK}),{20:[1,216]},{25:[1,218],66:[1,217]},{24:203,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,69:219},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,220]},{65:[1,221]},{9:[2,61]},{65:[1,222]},{25:$VX,66:[1,223]},{9:[2,58]},{24:224,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{24:203,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,69:225},o($VY,[2,63]),{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,226]},{25:$VX,66:[1,227]},{65:[1,228]},o($VY,[2,62]),{24:229,26:$Vg,27:$Vh,34:48,35:49,36:50,37:$Vi,39:53,40:54,41:55,50:$Vj,51:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{27:$Vw,28:$Vx,29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,66:[1,230]},{9:[2,59]}],
defaultActions: {17:[2,11],18:[2,12],20:[2,56],21:[2,57],22:[2,90],23:[2,91],33:[2,1],151:[2,13],154:[2,14],181:[2,95],182:[2,96],206:[2,60],217:[2,61],220:[2,58],230:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //Se accede a dist porque allí se encuentra el compilado
    const { Basico } = require("../dist/src/Expresiones/Basico");
    const { TipoDato } = require("../dist/src/Expresiones/Tipos");
    const { AST } = require("../dist/src/AST/AST");
    const { Aritmetica,OpAritmetico } = require("../dist/src/Expresiones/Aritmetica");
    const { Relacional,OperadorRelacional } = require("../dist/src/Expresiones/Relacional");
    const { Logico ,OperadorLogico } = require("../dist/src/Expresiones/Logicos");
    const { Acceso  } = require("../dist/src/Expresiones/Acceso");
    const { Echo } = require("../dist/src/Instrucciones/Echo");
    const { Declaracion } = require("../dist/src/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/src/Instrucciones/Asignacion");
    const { Fn_if } = require("../dist/src/Instrucciones/Control/If");
    const { Bloque } = require("../dist/src/Instrucciones/Bloque");
    const { Casteo } = require("../dist/src/Expresiones/Casteo");
    const { Incremento_Decremento } = require("../dist/src/Instrucciones/Incremento_Decremento");
    const { Vector1 } = require("../dist/src/Instrucciones/Vector1");
    const { CWhile } = require("../dist/src/Instrucciones/Ciclos/While");
    const { Break } = require("../dist/src/Instrucciones/Break");
    const { Ternario } = require("../dist/src/Expresiones/Ternario");
    const { AccesoVector } = require("../dist/src/Expresiones/AccesoVector");
    const { ModificarVector } = require("../dist/src/Instrucciones/ModificarVector");
    const { Vector2 } = require("../dist/src/Instrucciones/Vector2");
    const { Continue } = require("../dist/src/Instrucciones/Continue");
    const { Return } = require("../dist/src/Instrucciones/Return");
    const { Case } = require("../dist/src/Instrucciones/Control/Case");
    const { Default } = require("../dist/src/Instrucciones/Control/Default");
    const { Switch } = require("../dist/src/Instrucciones/Control/Switch");
    const { For } = require("../dist/src/Instrucciones/Ciclos/For");
    const { DoUntil } = require("../dist/src/Instrucciones/Ciclos/DoUntil");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR ESPACIOS */
break;
case 1:/* IGNORAR COMENTARIOS DE LINEA*/
break;
case 2:/* IGNORAR COMENTARIOS DE BLOQUE */
break;
case 3:return 58;
break;
case 4:return 77;
break;
case 5:return 51;
break;
case 6:return 79;
break;
case 7:return 82;
break;
case 8:return 87;
break;
case 9:return 88;
break;
case 10:return 89;
break;
case 11:return 90;
break;
case 12:return 91;
break;
case 13:return 92;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 96;
break;
case 17:return 17;
break;
case 18:return 22;
break;
case 19:return 67;
break;
case 20:return 68;
break;
case 21:return 59;
break;
case 22:return 60;
break;
case 23:return 61;
break;
case 24:return 62;
break;
case 25:return 28;
break;
case 26:return 27;
break;
case 27:return 29;
break;
case 28:return 30;
break;
case 29:return 31;
break;
case 30:return 32;
break;
case 31:return 33;
break;
case 32:return 42;
break;
case 33:return 43;
break;
case 34:return 45;
break;
case 35:return 47;
break;
case 36:return 44;
break;
case 37:return 46;
break;
case 38:return 48;
break;
case 39:return 49;
break;
case 40:return 50;
break;
case 41:return 37;
break;
case 42:return 38;
break;
case 43:return 80;
break;
case 44:return 81;
break;
case 45:return 9;
break;
case 46:return 25;
break;
case 47:return 'PUNTO';
break;
case 48:return 19;
break;
case 49:return 65;
break;
case 50:return 66;
break;
case 51:return 23;
break;
case 52:return 53;
break;
case 53:return 52;
break;
case 54:
    var texto = yy_.yytext.substr(1, yy_.yyleng - 2);
    texto = texto.replace(/\\n/g, "\n");
    texto = texto.replace(/\\\\/g, "\\");
    texto = texto.replace(/\\"/g, "\"");
    texto = texto.replace(/\\t/g, "\t");
    texto = texto.replace(/\\r/g, "\r");
    texto = texto.replace(/\\'/g, "'");
    texto = texto.replace(/\\b/g, "\b");
    yy_.yytext = texto;
    return 54;

break;
case 55:
    var texto = yy_.yytext.substr(1, yy_.yyleng - 2);
    texto = texto.replace(/\\n/g, "\n");
    texto = texto.replace(/\\\\/g, "\\");
    texto = texto.replace(/\\'/g, "'");
    texto = texto.replace(/\\t/g, "\t");
    texto = texto.replace(/\\r/g, "\r");
    texto = texto.replace(/\\b/g, "\b");
    yy_.yytext = texto;
    return 55;

break;
case 56:return 56;
break;
case 57:return 57;
break;
case 58:return 20;
break;
case 59:return 26;
break;
case 60:return 5;
break;
case 61:
    // CODIGO JS SI FUESE NECESARIO
    


break;
case 62:
    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:echo\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:Switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:new\b)/i,/^(?:vector\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"([^\"\\]|\\[btnr\"\'\\])*")/i,/^(?:'([^\'\\]|\\[btnr\"\'\\])')/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int|double|bool|char|string|NULL\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}